openapi: 3.1.0
info:
  title: Manipulação de eventos
  version: "1.0"
  description: |
    
    ### O código demonstra como alguns eventos podem ser usados. Listados abaixo estão alguns casos de uso comuns

    - `antes de renderizar` - Bom lugar para ajustar a especificação OpenAPI, se necessário. Neste exemplo, o título acima é criado dinamicamente.
    - `before-try` - Bom lugar para ajustar a solicitação, como adicionar um cabeçalho de solicitação ou abortar a solicitação.
    - `after-try` - Bom lugar para inspecionar a resposta recebida

    #### Para testá-lo vá em frente e clique em EXPERIMENTAR abaixo, você notará todos `POST` as solicitações são abortadas e `GET` são sucesso <br/><br/>


    ```markup

    <!DOCTYPE html>
    <html lang="en">
    <head>
    <meta charset="UTF-8">
    <title>json VueJS</title>
    <link rel='stylesheet' href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" />
    </head>
    
    <body>
    <div id="app">
    <table class="table table-striped mt-4">
      <thead>
        <tr>
          <th scope="col">Id</th>
          <th scope="col">UserId</th>
          <th scope="col">Title</th>
          <th scope="col">Content</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="post in posts" :key="post.id">
          <th scope="row">{{ post.id }}</th>
          <th scope="row">{{post.userId }}</th>
          <td>{{ post.title }}</td>
          <td>{{post.body}}</td>
        </tr>
      </tbody>
    </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.3/vue.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    
    <script>
    new Vue({
      el: "#app",
      data: {
        posts: []
      },
      created() {
        this.getData();
      },
      methods: {
        getData() {
          axios.get("https://jsonplaceholder.typicode.com/posts").then((posts) => {
            this.posts = posts.data;
            console.log(this.posts);
          });
        }
      }
    });
    </script>
    </body>
    </html>
    ```
servers:
  - url: https://jsonplaceholder.typicode.com
paths:
  /posts:
    get:
      description: Lista de usuários (paginada)
      parameters:
        - userId: 1
          id: 1
          title: sunt aut facere repellat provident occaecati excepturi optio reprehenderit
            body: quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto
            examples: 
              - 1
              - 2
      responses:
        '200':
          description: operação bem sucedida
          content:
            application/json:
              schema:
                type: object
                description: Descrição de **User** object
                properties:
                  page:
                    description: Número da página atual
                    type: integer
                  per_page:
                    description: Número de registros por página
                    type: integer
                  total:
                    description: Número total de registros
                    type: integer
                  total_pages:
                    type: integer
                  data:
                    type: array
                    description: Lista de usuários
                    items:
                      $ref: '#/components/schemas/user'
                  support:
                    $ref: '#/components/schemas/support'
    post:
      description: Criar um usuário
      parameters:
        - name: delay
          in: query
          schema:
            type: integer
            examples: 
              - 1
              - 10
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userInput"
      responses:
        201:
          description: Resposta de criação do usuário
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/userInput'
                  - $ref: '#/components/schemas/createUserResponse'

components:
  schemas:
    user:
      type: object
      properties:
        id:
          description: User ID
          type: integer
        email:
          description: User Email
          type: string
        first_name:
          description: First Name
          type: string
        last_name:
          description: Last Name
          type: string
        avatar:
          description: Avatar URL
          type: string
    support:
      type: object
      properties:
        url:
          description: Support URL
          type: string
        text:
          description: Support URL - Description
          type: string
    userInput:
      type: object
      description: user object with `name` and `job` properties
      properties:
        name:
          description: User Name
          type: string
        job:
          description: Job
          type: string
    createUserResponse:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
